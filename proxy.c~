#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <pthread.h>
#include<stdlib.h>
#include<strings.h>
#include<string.h>
#include<stdbool.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include<netdb.h>

int con(int portno){
	int serfd;
struct sockaddr_in seraddr,client;


if((serfd=socket(AF_INET,SOCK_STREAM,0))<0){
printf("socket failed\n");
return 0;
}

bzero((char *) &seraddr, sizeof(seraddr));
seraddr.sin_addr.s_addr = INADDR_ANY;// assigning server address;
seraddr.sin_family = AF_INET;
seraddr.sin_port = htons(portno);
if(bind(serfd,(struct sockaddr *) &seraddr,sizeof(seraddr))<0){
printf("binding failed\n");
return 0;}

int n=listen(serfd,2);
if(n<0){printf("error in listen\n");}
int i=0;pthread_t pd[12];int q;

int cli=sizeof(client);
int clifd;
clifd=accept(serfd,(struct sockaddr *) &client,&cli);
if(clifd<=0){printf("Errror in accept\n");exit(0);}	
	return clifd;


}

int con_server(char domain[50],char uri[50],int portno){


char buf[1024000];

int i; 
int sockfd,n;struct sockaddr_in host;


struct addrinfo hints, *servinfo, *p;
int rv;
memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC; // use AF_INET6 to force IPv6
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags=AI_CANONNAME;
if ((rv = getaddrinfo(domain,"80", &hints, &servinfo)) != 0) {
fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
exit(1);
}
// loop through all the results and connect to the first we can
for(p = servinfo; p != NULL; p = p->ai_next) {
if ((sockfd = socket(p->ai_family, p->ai_socktype,p->ai_protocol)) == -1) {
perror("socket");
continue;
}
if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
close(sockfd);
perror("connect");
continue;
}


break; // if we get here, we must have connected successfully
}
if (p == NULL) {
// looped off the end of the list with no connection
fprintf(stderr, "failed to connect\n");
exit(2);
}
freeaddrinfo(servinfo);


printf("connecting to server successfull,%d\n",sockfd);
return sockfd;
}

int main(int argc,char **argv){
	if(argc!=2){printf("Input format expected is %s <port>",argv[0]);exit(0);}
	int portno=atoi(argv[1]);char *fff;
	int clifd=con(portno);
	printf("clifd is :%d\n",clifd);
		int i;char buf[1024000],dup[1024000];
		i=read(clifd,buf,sizeof(buf));	if(i<0){printf("Error in reading 1st req");exit(0);}
		printf("input req is :%s\n",buf);
		strcpy(dup,buf);
		char *pch;char domain[50],uri[50],http[50];int port;
		pch=strtok(buf," ");
	if(strcasecmp(pch,"get")==0){
		pch=strtok(NULL,"/ ");printf("domain:%s\n",pch);
		strcpy(domain,pch);// domain=pch;
		pch=strtok(NULL,"/ ");
		
		if(pch==NULL || (strcmp(pch,"HTTP")==0)){uri[50]="";
		printf("eeeeeeeeee :%s\n",pch);
		memset(uri,0,sizeof(uri));
		port=80;
		strcpy(http,"HTTP/1.1");
		printf("eeeeeeeeee :%s\n",http);
		goto no_url;
		}
		else{
		printf("uri:%s\n",pch);
		strcpy(uri,pch);// uri=pch;
		}
		pch=strtok(NULL,":");int size;
		if(pch==NULL){port=80;size=0;}
		else if((strcmp(pch,"HTTP/1.1")==0) || (strcmp(pch,"HTTP/1.0")==0))
		{port=80;strcpy(http,"HTTP/1.1");goto no_url;}
		else{printf("portddd:%s\n",pch);
		port=atoi(pch);size=(int)strlen(pch);}
		printf("port:%d\n",port);
		pch=strtok(NULL," ");
		strcpy(http,pch);no_url:
		printf("parsed items are domain,uri,port,size,http:%s,%s,%d,%d,%s\n",domain,uri,port,size,http);
	
	//connecting to server...
	int fd=con_server(domain,uri,port);	
	//printf("Server result is: \n%d",fd);
	//memset(fff,0,sizeof(fff));
	//printf("merker \n");
	char bur[255];
	//snprintf(fff,sizeof(fff),"%s%s%s%s%s%s","GET ",domain,uri," HTTP/1.1\r\nHost: ",domain,"\r\n\r\n");
	strcpy(bur,"GET ");
	strcat(bur,domain);strcat(bur,"/");strcat(bur,uri);strcat(bur," HTTP/1.1\r\nHost: ");strcat(bur,domain);strcat(bur,"\r\n\r\n");
fff="GET http://facebook.com/ HTTP/1.1\r\n"
"Host: facebook.com\r\n"
"\n\n";
	printf("merged: \n%s",bur);
	printf("non-merged: \n%s",fff);
	//i=write(fd,bur,strlen(bur));
	i=write(fd,buf,strlen(buf));
	//i=write(fd,fff,strlen(fff));
	if(i<0){printf("writing to server failed\n");exit(0);}
	printf("written to server\n");
	i=read(fd,buf,sizeof(buf));
	if(i<0){printf("reading from server failed\n");exit(0);}
	printf("Server result is: \n%s",buf);
	i=write(clifd,buf,strlen(buf));
	if(i<0){printf("writing to client failed\n");exit(0);}close(fd);
	}
	else{printf("Error in the format\n");i=write(clifd,"HTTP Error 400 Bad request\n",strlen("HTTP Error 400 Bad request\n"));
	if(i<0){printf("writing to client failed\n");exit(0);} 
	}
close(clifd);
}
